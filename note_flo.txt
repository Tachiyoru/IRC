Note des fonctions

socket :
	proto :
		int socket(int domain, int type, int protocol);
	include need :
		- sys/types.h
		- sys/socket.h
	Description :
		- Creer un point d'entree pour les communications renvoie un FD qui pointe vers le point d'entree.
		- param entree domain et le port qu'il va ecoute
		- protocol is like TCP, UDP or IP (man 5 protocols)
	Flag pour "domain" :
		- PF_UNIX ou PF_LOCAL	= Communication en local
		- PF_INET				= Protocols IPV4
		- PF_INET6				= Protocols IPV6
		- PF_IPX				= IPX (http://jmainy.free.fr/guill.web-/Res5Nov.html#IPX)
		- PF_NETLINK			= Interface user noyau (netlink(7))
		- PF_X25				= Protocole ITU-T X.25 / ISO-8208 (X25(7))
		- PF_AX25				= Protocole AX.25 radio amateur
		- PF_ATMPVC				= Accès direct ATM PVCs
		- PF_APPLETALK			= Appletalk (ddp(7))
		- PF_PACKET				= Interface paquet bas-niveau (packet(7))

setsockopt :
	proto :
		int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
	include need :
		- sys/types.h
		- sys/socket.h
	Description :
		- Permet de manipuler les options des sockets.


getsockname :
	proto :
		int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
	include need :
		- sys/socket.h
	Description :
		- Renvoie l'adresse du sock_fd

getprotobyname :
	proto :
		struct protoent *getprotobyname(const char *name);
	include need :
		- netdb.h
	description :
		- renvoie une struct protoent les entree de la base de donnes qui on match. Une connection est necessaire.

gethostbyname :
	proto :
		struct hostent *gethostbyname(const char *name);
	include need :
		- netdb.h
	description :
		- renvoie une structure de type hostent pour le param d'entre name. (check doc pour les histoire IPV4)

getaddrinfo :
	proto :
		int getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
	include need :
		- sys/types.h
		- sys/socket.h
		- netdb.h
	Description :
		- Renvoie une ou plusiseur `addinfo`. Elle contienne chacune une addresse internet qui peut etre use par bind() ou connect().
		- Cette fonction permet de retirer les dependances IPV4 et IPV6.

freeaddrinfo :
	Marche avec la fonction du dessus. Il permet de free le retour de getaddrinfo.

bind :
	proto :
		int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
	include need :
		- sys/types.h
		- sys/socket.h
	Description :
		- Quand on utilise socket(2) on obtient une famille d'adresse
			mais aucun adresse d'asignation.
		- Bind donne une address precise a addr.

connect :
	proto :
		int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
	include need :
		- sys/types.h
		- sys/socket.h
	Description :
		- Connecte le socket donne en option d'entre a l'addresse donne par l'addr.
		- Addrlen est la taille de addr.

listen :#
	proto :
		int listen(int sockfd, int backlog);
	include need :
		- sys/types.h
		- sys/socket.h
	Description :
		- Listen va marque la socket(sockfd) en passive.
			Elle sera utilise pour accepter les demande de connections. (accept)



poll :
	proto :
		 int poll(struct pollfd *fds, nfds_t nfds, const struct timespec *tmo_p, const sigset_t *sigmask);
	include need :
		- signal.h
		- poll.h
	description :
	 - need to do this

##########################################################################
rfc1459 :

- Messages :
	> Chaque message IRC peut contenir jusqu'à trois parties :
		le préfixe (optionnel) ;
		la commande ;
		les paramètres de la commande (il peut y en avoir jusqu'à 15).
	Le préfixe, la commande, et tous les paramètres sont séparés
	par un (ou plusieurs) caractère(s) ASCII espace (0x20).

	> La commande doit être soit une commande IRC valide,
	soit un nombre de 3 chiffres représentés en texte ASCII.

	> Les messages IRC sont toujours des lignes de caractères
	terminés par une paire CR-LF (retour chariot - saut de ligne)

	> Les messages IRC ne doivent pas depasser 512 octets.

- Etablissement de connexion :
	> Le client doit fournir les informations suivantes lors de l'Etablissement
	de la connexion au serveur :
		PASS <password> (optionnel)
		NICK <nickname>
		USER <username> <hostname> <servername> :<realname>

	> PASS :
		# Plusieurs commandes PASS peuvent etre envoyees, mais seule la derniere
		sera prise en compte.

		# Reponses numeriques possibles :
			ERR_NEEDMOREPARAMS
			ERR_ALREADYREGISTRED

	> NICK :
		# Il est requis et doit etre unique.

		# Reponses numeriques possibles :
			ERR_NONICKNAMEGIVEN
			ERR_NICKCOLLISION

	> USER :
		# Il est requis.

		# Note : la commande USER n'est envoyee qu'a l'etablissement de la connection.

		# Reponses numeriques possibles :
			ERR_NEEDMOREPARAMS
			ERR_ALREADYREGISTRED

- Une fois connecte :
	> OPER :
		# Sera toujours recu sous la forme suivante :
			OPER <nickname> <password>

		# En cas de succes, le serveur envoie au reste du reseau le message :
			MODE <nickname> +o

		# Reponses numeriques possibles :
			ERR_NEEDMOREPARAMS
			RPL_YOUREOPER
			ERR_NOOPERHOST
			ERR_PASSWDMISMATCH

	> QUIT :
		# Sera toujours recu sous la forme suivante :
			QUIT :<quit message>

##########################################################################
rfc2812 :

- Server :
	> Les serveurs sont identifies par leur nom. Il ne peuvent avoir qu'au maximum 63 caracteres.

- Client :
	> Les utilisateurs doivent avec un identifiant unique.

- Users :
	> Les Utilisateurs sont differencie par leurs nom d'utilisateurs (Taille max de 9 caracteres).
	> Une plus grande taille de nom d'utilisateur est accepte dans les future version des protocols.

- Operators(Modo) :
	> Possede le droits d'executer des commandes speciales (Dangereuse) MAIS necessaire comme la deconnexion et la reconnexion des serveurs.
	> Les operateurs sont les seuls a pourvoirs utilisers les fonctions SQUIT(3.1.8) et CONNECTER(3.4.7)

	 > Il peut aussi supprimer un utilisateur du reseaux avec force. Il peut donc fermer des connections entre client et le serveur. KILL(3.7.1)

- Services :
	> Les services sont differencie en fonction de leur nom de service qui est compose de pseudo et du nom du serveur.
	> Les utilisateurs auront une longeur de 9 caractere(2.3.1).Check ce qui ne peut pas etre use dans les surnom.

- Channel :
	> Le nom des channels commence par "&#+!" d'une longeur maix de 50 caracteres. Les noms ne doivent pas avoir d'espaces, un ctrl G ou encore une virgule. Les : peuvent etre utilise comme delimiteur de masque pour le canal. Nom de channel non case sensitive.
	> POur les syntax (2.3.1)
	> Chaque prefix definis en channel differents. N'est pas a gerez donc dans le RFC 2812.

